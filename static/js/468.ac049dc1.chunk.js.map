{"version":3,"file":"static/js/468.ac049dc1.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css?a7c9","components/Profile/MyPosts/ProfileInfo/ProfileStatus.tsx","components/Profile/MyPosts/ProfileInfo/ProfileDataForm.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/ProfileInfo/ProfileData/ProfileData.module.css?82bd","components/Profile/MyPosts/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"ProfileInfo_avatar__BIWrf\",\"avatarWrapper\":\"ProfileInfo_avatarWrapper__0JBE2\",\"contact\":\"ProfileInfo_contact__80cYa\",\"profileData\":\"ProfileInfo_profileData__aHjjm\",\"avatarAndInfo\":\"ProfileInfo_avatarAndInfo__-897k\",\"statusBlock\":\"ProfileInfo_statusBlock__g5e8A\",\"statusWrapper\":\"ProfileInfo_statusWrapper__HPB-l\",\"statusTitle\":\"ProfileInfo_statusTitle__Y8990\",\"statusBody\":\"ProfileInfo_statusBody__yjBgu\",\"editStatus\":\"ProfileInfo_editStatus__p8KBW\",\"addPhotoBtn\":\"ProfileInfo_addPhotoBtn__nSJb1\",\"inputWrapper\":\"ProfileInfo_inputWrapper__oGaQl\",\"inputFile\":\"ProfileInfo_inputFile__fmAW1\",\"inputIcon\":\"ProfileInfo_inputIcon__PiV7+\"};","import React, {ChangeEvent} from 'react';\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport edit from \"./../../../../assets/images/edit.png\";\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<PropsType, any> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<any>, snapshot?: any) {\r\n        //debugger\r\n        prevProps.status !== this.props.status && this.setState({\r\n            status: this.props.status\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.statusBlock}>\r\n                {!this.state.editMode\r\n                    ? <div className={styles.statusWrapper}>\r\n                        <span className={styles.statusTitle}>What`s on your mind: </span>\r\n                        <span className={styles.statusBody} onDoubleClick={this.activateEditMode }>{this.props.status || <img src={edit} className={styles.editStatus} alt={'edit'} />}</span>\r\n                    </div>\r\n                    : <div>\r\n                        <span className={styles.statusTitle}>What`s on your mind: </span>\r\n                        <input className={styles.statusInput} onChange={this.onStatusChange} autoFocus onBlur={this.deactivateEditMode} value={this.state.status}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport styles from \"./ProfileInfo.module.css\"\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    initialValues: ProfileType\r\n    //handleSubmit: any\r\n    //error: any\r\n}\r\n//const ProfileDataForm = (props: any) => {\r\n//const ProfileDataForm = ({profile, handleSubmit,error}: any) => {\r\nconst ProfileDataForm: React.FC<InjectedFormProps<PropsType, PropsType> & PropsType> = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n                {props.error && <div className={styles.formSummaryError}>{props.error}</div>}\r\n            </div>\r\n            <div>\r\n                <b>Full name:</b>: <Field name={'fullName'} placeholder={'Full name'} component={Input} />\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: <Field name={'lookingForAJob'} component={Input} type={'checkbox'} />\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: <Field name={\"lookingForAJobDescription\"} placeholder={\"My professional skills\"} component={Textarea} />\r\n            </div>\r\n            <div>\r\n                <b>About Me</b>: <Field name={\"aboutMe\"} placeholder={\"About Me\"} component={Textarea} />\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\r\n                    //debugger\r\n                return <div key={key} className={styles.contact}>\r\n                    <b>{key}: <Field name={\"contacts.\" + key} component={Input} placeholder={key}/></b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n//const ProfileDataFormReduxForm = reduxForm<PropsType, PropsType>({form: \"edit-profile\"})(ProfileDataForm)\r\nconst ProfileDataFormReduxForm = reduxForm<PropsType, PropsType>({form: \"edit-profile\"})(ProfileDataForm)\r\n//const ProfileDataFormReduxForm = reduxForm({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","// extracted by mini-css-extract-plugin\nexport default {\"profileDataInfo\":\"ProfileData_profileDataInfo__M8YD-\",\"infoWrapper\":\"ProfileData_infoWrapper__SH55o\",\"info\":\"ProfileData_info__exKO6\",\"infoTitle\":\"ProfileData_infoTitle__c5i3h\",\"editBtnWrapper\":\"ProfileData_editBtnWrapper__W3k5l\",\"editBtn\":\"ProfileData_editBtn__V9i-X\",\"myName\":\"ProfileData_myName__2CK5X\",\"socialIcon\":\"ProfileData_socialIcon__TWZhE\",\"contactsWrapper\":\"ProfileData_contactsWrapper__DzfQM\"};","import styles from \"./ProfileData.module.css\";\r\nimport React from \"react\";\r\nimport facebookIcon from \"../../../../../assets/images/facebook.png\";\r\nimport websiteIcon from \"../../../../../assets/images/website.png\";\r\nimport vkIcon from \"../../../../../assets/images/vk.png\";\r\nimport twitterIcon from \"../../../../../assets/images/twitter.png\";\r\nimport instagramIcon from \"../../../../../assets/images/instagram.png\";\r\nimport youtubeIcon from \"../../../../../assets/images/youtube.png\";\r\nimport githubIcon from \"../../../../../assets/images/github.png\";\r\nimport mainLinkIcon from \"../../../../../assets/images/link.png\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <div className={styles.contact}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}\r\n\r\nexport const ProfileData = ({profile, isOwner, goToEditMode}: any) => { /// fix any\r\n//const ProfileData = ({profile, isOwner}: any) => { /// fix any\r\n\r\n    const contactsIcons = [facebookIcon, websiteIcon, vkIcon, twitterIcon, instagramIcon, youtubeIcon, githubIcon, mainLinkIcon];\r\n\r\n    const arrayOfContacts: any[] = Object.values(profile.contacts).map((value) => ({ 'link': value }));\r\n    for (let i = 0; i < contactsIcons.length; i++) {\r\n        arrayOfContacts[i].icon = contactsIcons[i];\r\n    }\r\n\r\n    return (\r\n        <div className={styles.profileDataInfo}>\r\n            <div className={styles.myName}>\r\n                {profile.fullName}\r\n            </div>\r\n\r\n            <div className={styles.infoWrapper}>\r\n                <div className={styles.info}>\r\n                    <div>\r\n                        <span className={styles.infoTitle}>About me</span>: {profile.aboutMe || 'no description'}\r\n                    </div>\r\n                    <div>\r\n                        <span className={styles.infoTitle}>Looking for a job</span>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                    </div>\r\n                    {profile.lookingForAJob ?\r\n                        <div>\r\n                            <span className={styles.infoTitle}>My professional skills</span>: {profile.lookingForAJobDescription}\r\n                        </div> : <></>\r\n                    }\r\n                    <div>\r\n                        {arrayOfContacts.map((el, index) => {\r\n                            return(\r\n                                <Link to={el.link || '#'} className={styles.socialLink} key={index}>\r\n                                    <img className={styles.socialIcon} src={el.icon} alt={'social icon'} />\r\n                                </Link>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    <div className={styles.contactsWrapper}>\r\n                        <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                    })}\r\n                    </div>\r\n                </div>\r\n                {isOwner && <div className={styles.editBtnWrapper}>\r\n                    <button className={styles.editBtn} onClick={goToEditMode}>Edit profile</button>\r\n                </div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../../common/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport userPhoto from \"./../../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport edit from \"./../../../../assets/images/edit.png\";\r\nimport {ProfileData} from \"./ProfileData/ProfileData\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formContactsData: any) => void\r\n}\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onSubmit = (formContactsData: any) => {\r\n        props.saveProfile(formContactsData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.profileData}>\r\n            <div className={styles.avatarAndInfo}>\r\n                <div className={styles.avatarWrapper}>\r\n                    <img className={styles.avatar} src={props.profile.photos?.large || userPhoto} alt=\"ava\"/>\r\n                    {props.isOwner &&\r\n                        <div className={styles.inputWrapper}>\r\n                            <input type=\"file\" name=\"file\" id=\"input-file\"\r\n                                   className={styles.inputFile + ' ' + styles.input} multiple\r\n                                   onChange={onMainPhotoSelected}/>\r\n                            <label htmlFor=\"input-file\" className={styles.addPhotoBtn}>\r\n                                <img className={styles.inputIcon} src={edit} alt={\"choose image\"}/>\r\n                            </label>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={goToEditMode}/>}\r\n            </div>\r\n\r\n            <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postAvatar\":\"Post_postAvatar__Csw4o\",\"item\":\"Post_item__PSwlO\",\"postBody\":\"Post_postBody__fmXdy\",\"message\":\"Post_message__Y6nAc\",\"name\":\"Post_name__QnheR\",\"likeIcon\":\"Post_likeIcon__qZiOi\"};","import React, {useState} from 'react';\r\nimport styles from \"./Post.module.css\";\r\nimport user from \"./../../../../assets/images/user.png\";\r\nimport like from \"./../../../../assets/images/like.png\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n    photo: string\r\n    name: string\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    const [likes, setLikes] = useState(props.likesCount);\r\n    const likeCountChange = () => {\r\n      setLikes(likes + 1)\r\n    }\r\n    return (\r\n        <div className={styles.item}>\r\n            <div className={styles.postBody}>\r\n                <div className={styles.postAvatar}>\r\n                    <img\r\n                        src={props.photo || user}\r\n                        alt={\"photo\"}/>\r\n                    <span className={styles.name}>{props.name}</span>\r\n                </div>\r\n                <div className={styles.message}>{props.message}</div>\r\n            </div>\r\n            <div>\r\n                <span>\r\n                    <img className={styles.likeIcon} src={like} alt={'like'} onClick={likeCountChange} />\r\n                    {/*{props.likesCount}{props.likesCount > 1 ? ' likes' : ' like'}*/}\r\n                    {likes}{likes > 1 ? ' likes' : ' like'}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport styles from \"./MyPosts.module.css\";\r\n\r\n\r\nconst maxLength30 = maxLength(30);\r\nconst AddPostForm: React.FC<InjectedFormProps<NewPostType>> = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name={'newPostText'}\r\n                    placeholder={'Write something here...'}\r\n                    component={Textarea}\r\n                    validate={[required, maxLength30]}\r\n                    className={styles.textarea}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={styles.sendPostBtn}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<NewPostType>({form: 'addNewPost'})(AddPostForm)\r\n\r\nexport type NewPostType = {\r\n    newPostText: string\r\n}","import React from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport styles from \"./MyPosts.module.css\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {AddPostReduxForm, NewPostType} from \"./AddPostForm\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.profilePage.postsData.map((p, index) => <Post key={index} name={props.profilePage.profile.fullName} photo={props.profilePage.profile.photos.large} message={p.message} likesCount={p.likesCount}/>)\r\n    //const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    const addPost = (post: NewPostType) => {\r\n        props.addPost(post.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <div className={styles.form}>\r\n                <h3>Create post</h3>\r\n                <AddPostReduxForm onSubmit={addPost} />\r\n            </div>\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\n//import Post from \"./Post/Post\";\r\n//import styles from \"./MyPosts.module.css\";\r\nimport {\r\n    addPostActionCreator, ProfilePageType\r\n} from \"../../../redux/profile-reducer\";\r\n//import {ActionsTypes, ProfilePageType} from \"../../../redux/store\";\r\nimport MyPosts from \"./MyPosts\";\r\n//import {StoreContext} from \"../../../StoreContext\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    //updateNewPostText: (text: string)=>void\r\n    addPost: (post: string)=>void\r\n}\r\nexport type MyPostsPropsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: (post: string)=>void\r\n    //updateNewPostText: (text: string)=>void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n      profilePage: state.profilePage\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n  return {\r\n      addPost: (post: string) => {\r\n          dispatch(addPostActionCreator(post))\r\n      },\r\n      /*updateNewPostText: (text: string) => {\r\n          dispatch(updateNewPostTextActionCreator(text))\r\n      }*/\r\n  }\r\n}\r\n\r\nexport const RRMyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*type MyPostsContainerPropsType = {\r\n    store: any\r\n    //profilePage: ProfilePageType\r\n    //dispatch: (action: ActionsTypes)=>void\r\n}*/\r\n\r\n//const MyPostsContainer = (props: MyPostsContainerPropsType) => {\r\n\r\n\r\n//let postsElements = props.profilePage.postsData.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n//const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n/* const addPost = () => {\r\n     //debugger\r\n     //const text = newPostElement.current.value;\r\n     //props.addPost();\r\n     //props.dispatch( {type: \"ADD-POST\", newPostText: props.profilePage.newPostText} );\r\n     props.store.dispatch(addPostActionCreator(props.store.getState().profilePage.newPostText));\r\n     //props.updateNewPostText('')\r\n\r\n     //console.log(newPostElement.current?.value)\r\n     //props.addPost(newPostElement.current? newPostElement.current.value : '---')\r\n }*/\r\n/* const onPostChange = (text: string) => {\r\n     //if (newPostElement.current) {\r\n     //const text = newPostElement.current.value;\r\n     //props.updateNewPostText(e.currentTarget.value)\r\n     //props.dispatch( {type: \"UPDATE-NEW-POST-TEXT\", newText: e.currentTarget.value} )\r\n     store.dispatch(updateNewPostTextActionCreator(text))\r\n     //}\r\n }*/\r\n/*const MyPostsContainer = () => {\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {\r\n                (store) => {\r\n                    const addPost = () => {\r\n                        store.dispatch(addPostActionCreator());\r\n                    }\r\n                    const onPostChange = (text: string) => {\r\n                        store.dispatch(updateNewPostTextActionCreator(text))\r\n                    }\r\n                    return (\r\n                        <MyPosts\r\n                            posts={store.getState().profilePage.postsData}\r\n                            newPostText={store.getState().profilePage.newPostText}\r\n                            addPost={addPost}\r\n                            updateNewPostText={onPostChange}\r\n                        />)\r\n                }\r\n            }\r\n        </StoreContext.Consumer>\r\n    );\r\n}*/\r\n\r\n\r\n//export default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__0mkPf\"};","import React from 'react';\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport {RRMyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport styles from \"./Profile.module.css\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formContactsData: any) => void\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={styles.profile}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n                saveProfile={props.saveProfile}\r\n\r\n            />\r\n            <RRMyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    updateUserStatus,\r\n    ProfileType,\r\n    savePhoto,\r\n    saveProfile\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string | number | null) => void\r\n    getUserStatus: (userId: string | number | null) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formContactsData: any) => void\r\n}\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType, ProfileType>{\r\n    refreshProfile() {\r\n        const userId = this.props.match.params.userId || this.props.authorizedUserId;\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n        /*const userId = this.props.match.params.userId || this.props.authorizedUserId;\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);*/\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: Readonly<ProfileType>) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n        /*const userId = this.props.match.params.userId || this.props.authorizedUserId;\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);*/\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <Profile\r\n                    isOwner={!this.props.match.params.userId}\r\n                    savePhoto={this.props.savePhoto}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}  saveProfile={this.props.saveProfile}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps  = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withAuthRedirect,\r\n    withRouter\r\n) (ProfileContainer)","import React from 'react';\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css';\r\n\r\n\r\ninterface TextareaProps extends WrappedFieldProps {\r\n    [key: string]: any; // можно добавить дополнительные параметры через rest-оператор\r\n}\r\n\r\nconst FormControl: React.FC<TextareaProps> = ({ children,  meta}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea: React.FC<TextareaProps> = ({input, children,  meta, ...props}) => {\r\n    return <FormControl meta={meta} input={input}><textarea {...input} {...props}/> </FormControl>\r\n    /*const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props} />\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );*/\r\n};\r\n\r\nexport const Input: React.FC<TextareaProps> = ({input, children, meta, ...props}) => {\r\n    return <FormControl meta={meta} input={input}><input {...input} {...props}/> </FormControl>\r\n    /*const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );*/\r\n};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n//import Profile from \"../components/Profile/Profile\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n      isAuth: state.auth.isAuth\r\n  }\r\n}\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    //debugger\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n      //debugger\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"} />\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","export const required = (value: string) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n}\r\n\r\nexport const maxLength = (length: number) => (value: string) => {\r\n  if (value.length > length) return `Max length is ${length} symbols`;\r\n  return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__L-aKk\",\"form\":\"MyPosts_form__D9efm\",\"textarea\":\"MyPosts_textarea__fAfKW\",\"sendPostBtn\":\"MyPosts_sendPostBtn__MU0l8\"};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__EJA-w\",\"error\":\"FormsControls_error__9uWXS\",\"formSummaryError\":\"FormsControls_formSummaryError__ISedJ\"};"],"names":["ProfileStatus","state","editMode","status","props","activateEditMode","setState","deactivateEditMode","updateUserStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","className","styles","onChange","autoFocus","onBlur","onDoubleClick","src","edit","alt","React","reduxForm","form","console","log","onSubmit","handleSubmit","error","Field","name","placeholder","component","Input","type","Textarea","Object","keys","profile","contacts","map","key","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","contactsIcons","facebookIcon","websiteIcon","vkIcon","twitterIcon","instagramIcon","youtubeIcon","githubIcon","mainLinkIcon","arrayOfContacts","values","i","length","icon","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","el","index","to","link","onClick","useState","setEditMode","Preloader","photos","large","userPhoto","id","multiple","target","files","savePhoto","htmlFor","initialValues","formContactsData","saveProfile","likesCount","likes","setLikes","photo","user","message","like","maxLength30","maxLength","AddPostReduxForm","validate","required","postsElements","profilePage","postsData","p","post","addPost","newPostText","RRMyPostsContainer","connect","dispatch","addPostActionCreator","MyPosts","ProfileContainer","userId","match","params","authorizedUserId","getUserProfile","getUserStatus","refreshProfile","compose","auth","isAuth","withAuthRedirect","withRouter","FormControl","children","meta","hasError","touched","s","input","mapStateToProps","Component","restProps"],"sourceRoot":""}