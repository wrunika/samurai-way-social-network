{"version":3,"file":"static/js/581.fcb9d7ef.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/SendMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Rrcgr\",\"dialogsItems\":\"Dialogs_dialogsItems__5XXfP\",\"active\":\"Dialogs_active__f5yv6\",\"dialog\":\"Dialogs_dialog__EPwo8\",\"name\":\"Dialogs_name__OTzyg\",\"messages\":\"Dialogs_messages__zYuAD\",\"message\":\"Dialogs_message__mD7pw\",\"textarea\":\"Dialogs_textarea__17wGd\"};","import React from 'react';\r\nimport styles from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport user from \"./../../../assets/images/user.png\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n  return(\r\n      <div className={styles.dialog + ' ' + styles.active}>\r\n          <NavLink to={path}>\r\n              <img src={user} alt={'user'}/>\r\n              <span className={styles.name}>{props.name}</span>\r\n          </NavLink>\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport styles from './../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n  return(\r\n      <div className={styles.message}>\r\n          {props.message}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLength, required} from \"../../utils/validators/validators\";\r\nimport styles from \"./../Profile/MyPosts/MyPosts.module.css\";\r\nimport s from \"./Dialogs.module.css\";\r\n\r\n\r\nconst maxLength50 = maxLength(50);\r\n\r\nconst SendMessageForm: React.FC<InjectedFormProps<NewMessageType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Send your message...'}\r\n                    name={'newMessageBody'}\r\n                    component={Textarea}\r\n                    validate={[required, maxLength50]}\r\n                    className={s.textarea}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={styles.sendPostBtn}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const SendMessageReduxForm = reduxForm<NewMessageType>({form: 'sendNewMessage'})(SendMessageForm)\r\n\r\nexport type NewMessageType = {\r\n    newMessageBody: string\r\n}","import React from 'react';\r\nimport styles from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {NewMessageType, SendMessageReduxForm} from \"./SendMessageForm\";\r\n//import {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const dialogsElement = props.dialogsPage.dialogsData.map((d, index) => <DialogItem key={index} name={d.name} id={d.id} />);\r\n    const messagesElement = props.dialogsPage.messagesData.map((m, index) => <Message key={index} message={m.message} />);\r\n\r\n\r\n    const sendMessage = (message: NewMessageType) => {\r\n        props.onSendMessageClick(message.newMessageBody)\r\n    }\r\n    //if (!props.isAuth) return <Redirect to={\"login\"} />;\r\n\r\n    return (\r\n        <div >\r\n            <div className={styles.dialogs}>\r\n                <div className={styles.dialogsItems}>\r\n                    {dialogsElement}\r\n                </div>\r\n                <div className={styles.messages}>\r\n                    <div>{messagesElement}</div>\r\n                </div>\r\n            </div>\r\n            <div className={styles.sendMessage}>\r\n                <SendMessageReduxForm onSubmit={sendMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n","import React from 'react';\r\nimport {DialogsPageType, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    //onNewMessageChange: (body: string)=>void\r\n    onSendMessageClick: (newMessageBody: string)=>void\r\n}\r\nexport type DialogsPropsType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n      dialogsPage: state.dialogsPage\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        /*onNewMessageChange: (body: string)=>{\r\n            dispatch(updateNewMessageBodyAC(body))\r\n        },*/\r\n        onSendMessageClick: (newMessageBody: string)=>{\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Dialogs)\r\n\r\nexport default DialogsContainer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*type DialogsContainerPropsType = {\r\n    store: any\r\n    //dialogsPage: DialogsPageType\r\n    //dispatch: (action: ActionsTypes)=>void\r\n}*/\r\n//const DialogsContainer = (props: DialogsContainerPropsType) => {\r\n\r\n\r\n//const newMessageRef = React.createRef<HTMLTextAreaElement>();\r\n/*const onSendMessageClick = () => {\r\n  //alert(newMessageRef.current?.value)\r\n    props.store.dispatch(sendMessageAC(props.store.getState().dialogsPage.newMessageBody))\r\n}*/\r\n/*const onNewMessageChange = (body: string) => {\r\n    props.store.dispatch(updateNewMessageBodyAC(body))\r\n}*/\r\n/*\r\nconst DialogsContainer = () => {\r\n    return(\r\n        <StoreContext.Consumer>\r\n            {\r\n                (store) => {\r\n                    /!*const onSendMessageClick = () => {\r\n                        store.dispatch(sendMessageAC(store.getState().dialogsPage.newMessageBody))\r\n                    }*!/\r\n                    const onSendMessageClick = () => {\r\n                        store.dispatch(sendMessageAC())\r\n                    }\r\n                    const onNewMessageChange = (body: string) => {\r\n                        store.dispatch(updateNewMessageBodyAC(body))\r\n                    }\r\n                    return (\r\n                    <Dialogs\r\n                        dialogsData={store.getState().dialogsPage.dialogsData}\r\n                        messagesData={store.getState().dialogsPage.messagesData}\r\n                        newMessageBody={store.getState().dialogsPage.newMessageBody}\r\n                        onSendMessageClick={onSendMessageClick}\r\n                        onNewMessageChange={onNewMessageChange}\r\n                    />)\r\n                }\r\n                }\r\n        </StoreContext.Consumer>\r\n    )\r\n}\r\n*/\r\n\r\n//export default DialogsContainer;","import React from 'react';\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css';\r\n\r\n\r\ninterface TextareaProps extends WrappedFieldProps {\r\n    [key: string]: any; // можно добавить дополнительные параметры через rest-оператор\r\n}\r\n\r\nconst FormControl: React.FC<TextareaProps> = ({ children,  meta}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea: React.FC<TextareaProps> = ({input, children,  meta, ...props}) => {\r\n    return <FormControl meta={meta} input={input}><textarea {...input} {...props}/> </FormControl>\r\n    /*const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props} />\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );*/\r\n};\r\n\r\nexport const Input: React.FC<TextareaProps> = ({input, children, meta, ...props}) => {\r\n    return <FormControl meta={meta} input={input}><input {...input} {...props}/> </FormControl>\r\n    /*const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );*/\r\n};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n//import Profile from \"../components/Profile/Profile\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n      isAuth: state.auth.isAuth\r\n  }\r\n}\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    //debugger\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n      //debugger\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"} />\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","export const required = (value: string) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n}\r\n\r\nexport const maxLength = (length: number) => (value: string) => {\r\n  if (value.length > length) return `Max length is ${length} symbols`;\r\n  return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__L-aKk\",\"form\":\"MyPosts_form__D9efm\",\"textarea\":\"MyPosts_textarea__fAfKW\",\"sendPostBtn\":\"MyPosts_sendPostBtn__MU0l8\"};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__EJA-w\",\"error\":\"FormsControls_error__9uWXS\",\"formSummaryError\":\"FormsControls_formSummaryError__ISedJ\"};"],"names":["props","path","id","className","styles","to","src","user","alt","name","message","maxLength50","maxLength","SendMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","s","dialogsElement","dialogsPage","dialogsData","map","d","index","messagesElement","messagesData","m","onSendMessageClick","newMessageBody","compose","connect","state","dispatch","sendMessageAC","withAuthRedirect","Dialogs","FormControl","children","meta","hasError","touched","error","input","Input","mapStateToProps","isAuth","auth","Component","restProps","value","length"],"sourceRoot":""}