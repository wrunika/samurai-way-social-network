{"version":3,"file":"static/js/944.8954a7b4.chunk.js","mappings":"wNAkDMA,GAAiBC,EAAAA,EAAAA,GAAwB,CAC3CC,KAAM,SADaD,EAjCsC,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MACzE,OACI,kBAAMC,SAAUF,EAAhB,WACI,0BACI,SAAC,IAAD,CACIG,YAAa,QACbC,KAAM,QACNC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,QAGnB,0BACI,SAAC,IAAD,CACIL,YAAa,WACbC,KAAM,WACNC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,GACXC,KAAM,gBAGd,4BACI,SAAC,IAAD,CAAOA,KAAM,WAAYL,KAAM,aAAcC,UAAWC,EAAAA,IAD5D,kBAGCL,IAAS,gBAAKS,UAAWC,EAAAA,EAAAA,iBAAhB,SACLV,KAEL,0BACI,8CAyChB,WAAeW,EAAAA,EAAAA,KA/BS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,UA6Ba,CAACE,MAAAA,EAAAA,IAAzC,EA1Bc,SAACC,GAMX,OAAIA,EAAMH,QAAe,SAAC,KAAD,CAAUI,GAAI,cAGnC,4BACI,mCACA,SAACrB,EAAD,CAAgBK,SAVP,SAACiB,GACdC,QAAQC,IAAIF,GACZF,EAAMD,MAAMG,EAASH,MAAOG,EAASG,SAAUH,EAASI,sB,6LCrD1DC,EAAuC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAWC,EAAU,EAAVA,KACjDC,EAAWD,EAAKE,SAAWF,EAAKzB,MACtC,OACI,iBAAKS,UAAWC,EAAAA,EAAAA,YAAgB,KAAOgB,EAAWhB,EAAAA,EAAAA,MAAU,IAA5D,WACI,yBACKc,IAEJE,IAAY,iBAAMjB,UAAWC,EAAAA,EAAAA,MAAjB,SAA2Be,EAAKzB,YAK5C4B,EAAoC,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAkBJ,GAAoB,EAA/BD,SAA+B,EAApBC,MAAST,GAAW,YACrF,OAAO,UAACO,EAAD,CAAaE,KAAMA,EAAMI,MAAOA,EAAhC,WAAuC,uCAAcA,GAAWb,IAAhE,QAYEX,EAAiC,SAAC,GAAuC,IAAtCwB,EAAqC,EAArCA,MAAiBJ,GAAoB,EAA9BD,SAA8B,EAApBC,MAAST,GAAW,YACjF,OAAO,UAACO,EAAD,CAAaE,KAAMA,EAAMI,MAAOA,EAAhC,WAAuC,oCAAWA,GAAWb,IAA7D,S,4ECnCJ,IAAMT,EAAW,SAACuB,GACvB,IAAIA,EACJ,MAAO,qBAGIC,EAAY,SAACC,GAAD,OAAoB,SAACF,GAC5C,GAAIA,EAAME,OAASA,EAAQ,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCL7B,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from './../common/FormsControls/FormsControls.module.css';\r\n\r\n\r\ntype FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Login'}\r\n                    name={'login'}\r\n                    component={Input}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Password'}\r\n                    name={'password'}\r\n                    component={Input}\r\n                    validate={[required]}\r\n                    type={'password'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}/> remember me\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\nconst mapStateToProps = (state:AppStateType):MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nconst Login = (props: LoginPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        console.log(formData)\r\n        props.login(formData.login, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) return <Redirect to={\"/profile\"}/>\r\n\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\ntype LoginPropsType = MapStatePropsType & MapDispatchToPropsType\r\n\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css';\r\n\r\n\r\ninterface TextareaProps extends WrappedFieldProps {\r\n    [key: string]: any; // можно добавить дополнительные параметры через rest-оператор\r\n}\r\n\r\nconst FormControl: React.FC<TextareaProps> = ({ children,  meta}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea: React.FC<TextareaProps> = ({input, children,  meta, ...props}) => {\r\n    return <FormControl meta={meta} input={input}><textarea {...input} {...props}/> </FormControl>\r\n    /*const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props} />\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );*/\r\n};\r\n\r\nexport const Input: React.FC<TextareaProps> = ({input, children, meta, ...props}) => {\r\n    return <FormControl meta={meta} input={input}><input {...input} {...props}/> </FormControl>\r\n    /*const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );*/\r\n};","export const required = (value: string) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n}\r\n\r\nexport const maxLength = (length: number) => (value: string) => {\r\n  if (value.length > length) return `Max length is ${length} symbols`;\r\n  return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__EJA-w\",\"error\":\"FormsControls_error__9uWXS\",\"formSummaryError\":\"FormsControls_formSummaryError__ISedJ\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","placeholder","name","component","Input","validate","required","type","className","s","connect","state","isAuth","auth","login","props","to","formData","console","log","password","rememberMe","FormControl","children","meta","hasError","touched","Textarea","input","value","maxLength","length"],"sourceRoot":""}