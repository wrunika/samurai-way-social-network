{"version":3,"file":"static/js/80.aff060ca.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css?a7c9","components/Profile/MyPosts/ProfileInfo/ProfileStatus.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"ProfileInfo_avatar__BIWrf\"};","import React, {ChangeEvent} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<PropsType, any> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<any>, snapshot?: any) {\r\n        //debugger\r\n        prevProps.status !== this.props.status && this.setState({\r\n            status: this.props.status\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode\r\n                    ? <div>\r\n                        <span onDoubleClick={this.activateEditMode }>{this.props.status || '-----------'}</span>\r\n                    </div>\r\n                    : <div>\r\n                        <input onChange={this.onStatusChange} autoFocus onBlur={this.deactivateEditMode} value={this.state.status}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../../common/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={styles.avatar}>\r\n                <img src={props.profile.photos?.small} alt=\"ava\"/>\r\n                <p>{props.profile.fullName}</p>\r\n                <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus} />\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__PSwlO\"};","import React from 'react';\r\nimport styles from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <img\r\n                src={\"https://avatars.mds.yandex.net/i?id=c51291d7307ceef69a29521c604ed594628f5e98-4714015-images-thumbs&n=13\"}\r\n                alt={\"photo\"}/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount} like</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__L-aKk\",\"posts\":\"MyPosts_posts__4UG3m\"};","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst maxLength30 = maxLength(30);\r\nconst AddPostForm: React.FC<InjectedFormProps<NewPostType>> = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name={'newPostText'}\r\n                    placeholder={'Write something'}\r\n                    component={Textarea}\r\n                    validate={[required, maxLength30]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<NewPostType>({form: 'addNewPost'})(AddPostForm)\r\n\r\nexport type NewPostType = {\r\n    newPostText: string\r\n}","import React from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport styles from \"./MyPosts.module.css\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {AddPostReduxForm, NewPostType} from \"./AddPostForm\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.profilePage.postsData.map((p, index) => <Post key={index} message={p.message} likesCount={p.likesCount}/>)\r\n    //const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    const addPost = (post: NewPostType) => {\r\n        props.addPost(post.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddPostReduxForm onSubmit={addPost} />\r\n            </div>\r\n            <div className={styles.posts}>\r\n                {postsElements}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\n//import Post from \"./Post/Post\";\r\n//import styles from \"./MyPosts.module.css\";\r\nimport {\r\n    addPostActionCreator, ProfilePageType\r\n} from \"../../../redux/profile-reducer\";\r\n//import {ActionsTypes, ProfilePageType} from \"../../../redux/store\";\r\nimport MyPosts from \"./MyPosts\";\r\n//import {StoreContext} from \"../../../StoreContext\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    //updateNewPostText: (text: string)=>void\r\n    addPost: (post: string)=>void\r\n}\r\nexport type MyPostsPropsType = {\r\n    profilePage: ProfilePageType\r\n    addPost: (post: string)=>void\r\n    //updateNewPostText: (text: string)=>void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n      profilePage: state.profilePage\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n  return {\r\n      addPost: (post: string) => {\r\n          dispatch(addPostActionCreator(post))\r\n      },\r\n      /*updateNewPostText: (text: string) => {\r\n          dispatch(updateNewPostTextActionCreator(text))\r\n      }*/\r\n  }\r\n}\r\n\r\nexport const RRMyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*type MyPostsContainerPropsType = {\r\n    store: any\r\n    //profilePage: ProfilePageType\r\n    //dispatch: (action: ActionsTypes)=>void\r\n}*/\r\n\r\n//const MyPostsContainer = (props: MyPostsContainerPropsType) => {\r\n\r\n\r\n//let postsElements = props.profilePage.postsData.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n//const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n/* const addPost = () => {\r\n     //debugger\r\n     //const text = newPostElement.current.value;\r\n     //props.addPost();\r\n     //props.dispatch( {type: \"ADD-POST\", newPostText: props.profilePage.newPostText} );\r\n     props.store.dispatch(addPostActionCreator(props.store.getState().profilePage.newPostText));\r\n     //props.updateNewPostText('')\r\n\r\n     //console.log(newPostElement.current?.value)\r\n     //props.addPost(newPostElement.current? newPostElement.current.value : '---')\r\n }*/\r\n/* const onPostChange = (text: string) => {\r\n     //if (newPostElement.current) {\r\n     //const text = newPostElement.current.value;\r\n     //props.updateNewPostText(e.currentTarget.value)\r\n     //props.dispatch( {type: \"UPDATE-NEW-POST-TEXT\", newText: e.currentTarget.value} )\r\n     store.dispatch(updateNewPostTextActionCreator(text))\r\n     //}\r\n }*/\r\n/*const MyPostsContainer = () => {\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {\r\n                (store) => {\r\n                    const addPost = () => {\r\n                        store.dispatch(addPostActionCreator());\r\n                    }\r\n                    const onPostChange = (text: string) => {\r\n                        store.dispatch(updateNewPostTextActionCreator(text))\r\n                    }\r\n                    return (\r\n                        <MyPosts\r\n                            posts={store.getState().profilePage.postsData}\r\n                            newPostText={store.getState().profilePage.newPostText}\r\n                            addPost={addPost}\r\n                            updateNewPostText={onPostChange}\r\n                        />)\r\n                }\r\n            }\r\n        </StoreContext.Consumer>\r\n    );\r\n}*/\r\n\r\n\r\n//export default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport {RRMyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus} />\r\n            <RRMyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getUserProfile, getUserStatus, updateUserStatus, ProfileType} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string | number | null) => void\r\n    getUserStatus: (userId: string | number | null) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType, ProfileType>{\r\n    componentDidMount() {\r\n        const userId = this.props.match.params.userId || this.props.authorizedUserId;\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <Profile\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps  = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withAuthRedirect,\r\n    withRouter\r\n) (ProfileContainer)","import React from 'react';\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css';\r\n\r\n\r\ninterface TextareaProps extends WrappedFieldProps {\r\n    [key: string]: any; // можно добавить дополнительные параметры через rest-оператор\r\n}\r\n\r\nconst FormControl: React.FC<TextareaProps> = ({ children,  meta}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea: React.FC<TextareaProps> = ({input, children,  meta, ...props}) => {\r\n    return <FormControl meta={meta} input={input}><textarea {...input} {...props}/> </FormControl>\r\n    /*const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input} {...props} />\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );*/\r\n};\r\n\r\nexport const Input: React.FC<TextareaProps> = ({input, children, meta, ...props}) => {\r\n    return <FormControl meta={meta} input={input}><input {...input} {...props}/> </FormControl>\r\n    /*const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            {hasError && <span className={s.error}>{meta.error}</span>}\r\n        </div>\r\n    );*/\r\n};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n//import Profile from \"../components/Profile/Profile\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n      isAuth: state.auth.isAuth\r\n  }\r\n}\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    //debugger\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n      //debugger\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"} />\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","export const required = (value: string) => {\r\n  if (value) return undefined;\r\n  return 'Field is required';\r\n}\r\n\r\nexport const maxLength = (length: number) => (value: string) => {\r\n  if (value.length > length) return `Max length is ${length} symbols`;\r\n  return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__EJA-w\",\"error\":\"FormsControls_error__9uWXS\",\"formSummaryError\":\"FormsControls_formSummaryError__ISedJ\"};"],"names":["ProfileStatus","state","editMode","status","props","activateEditMode","setState","deactivateEditMode","updateUserStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","onChange","autoFocus","onBlur","onDoubleClick","React","profile","className","styles","src","photos","small","alt","fullName","Preloader","message","likesCount","maxLength30","maxLength","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","placeholder","component","Textarea","validate","required","postsElements","profilePage","postsData","map","p","index","post","addPost","newPostText","RRMyPostsContainer","connect","dispatch","addPostActionCreator","MyPosts","ProfileContainer","userId","match","params","authorizedUserId","getUserProfile","getUserStatus","compose","auth","id","isAuth","withAuthRedirect","withRouter","FormControl","children","meta","hasError","touched","error","s","input","Input","mapStateToProps","Component","restProps","to","length"],"sourceRoot":""}